name: 4. 建立 Windows 版本 (x86_64-pc-windows-msvc)

on:
  push:
    tags:
      - 'x*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: 建立 Windows 可執行檔 (x86_64-pc-windows-msvc)
    runs-on: windows-latest
    steps:
      - name: 設定相關環境變數
        run: | 
          $target = "aarch64-pc-windows-msvc"
          echo "TARGET=$target" | Add-Content -Path $env:GITHUB_ENV
          echo "FILENAME=FFmpegGUI-windows-x86_64.exe" | Add-Content -Path $env:GITHUB_ENV
          echo "FILEPATH=src-tauri/target/$target/release/tauri_ffmpeg_gui.exe" | Add-Content -Path $env:GITHUB_ENV

      - name: 取得原始碼
        uses: actions/checkout@v4

      - name: 設定 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 安裝 Rust 工具鏈
        uses: dtolnay/rust-toolchain@stable

      - name: 安裝 Rust 目標
        run: rustup target add ${{ env.TARGET }}

      - name: 快取 Rust 相依套件
        uses: Swatinem/rust-cache@v2

      - name: 輸出 Node.js版本 / Rust版本
        run: |
          node --version
          rustc --version

      - name: 安裝前端相依套件 (package-lock.json)
        run: npm ci

      - name: 建置應用程式
        run: npm run tauri build -- --target ${{ env.TARGET }}
      
      - name: 列出產物目錄
        run: dir src-tauri/target/${{ env.TARGET }}/release/

      - name: 上傳產物
        id: upload_artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILENAME }}
          path: ${{ env.FILEPATH }}
      
      - name: 建立 Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 上傳執行檔到 Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_release.outputs.result.upload_url }}
          asset_path: ${{ env.FILEPATH }}
          asset_name: ${{ env.FILENAME }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}