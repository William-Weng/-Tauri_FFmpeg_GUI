name: 建立版本

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  create-release:
    name: 建立 GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: 建立 Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "${{ github.ref_name }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows-x86_64:
    name: x86_64-pc-windows-msvc
    runs-on: windows-latest
    needs: create-release
    steps:
      - name: 設定相關環境變數
        run: | 
          $target = "x86_64-pc-windows-msvc"
          $isa = "x86_64"
          echo "TARGET=$target" | Add-Content -Path $env:GITHUB_ENV
          echo "FILENAME=FFmpegGUI-windows-$isa.exe" | Add-Content -Path $env:GITHUB_ENV
          echo "FILEPATH=src-tauri/target/$target/release/tauri_ffmpeg_gui.exe" | Add-Content -Path $env:GITHUB_ENV
          echo "UPLOAD_URL='${{ needs.create-release.outputs.upload_url }}'" | Add-Content -Path $env:GITHUB_ENV

      - name: 取得原始碼
        uses: actions/checkout@v4

      - name: 設定 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 安裝 Rust 工具鏈
        uses: dtolnay/rust-toolchain@stable

      - name: 安裝 Rust 編譯架構
        run: rustup target add ${{ env.TARGET }}

      - name: 快取 Rust 相依套件
        uses: Swatinem/rust-cache@v2

      - name: 輸出 Node.js版本 / Rust版本
        run: |
          node --version
          rustc --version

      - name: 安裝前端相依套件 (package-lock.json)
        run: npm ci

      - name: 建置應用程式
        run: npm run tauri build -- --target ${{ env.TARGET }}
      
      - name: 列出產物目錄
        run: dir src-tauri/target/${{ env.TARGET }}/release/

      - name: 上傳產物
        id: upload_artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILENAME }}
          path: ${{ env.FILEPATH }}

      - name: 上傳執行檔到 Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ${{ env.FILEPATH }}
          asset_name: ${{ env.FILENAME }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows-arm64:
    name: aarch64-pc-windows-msvc
    runs-on: windows-latest
    needs: create-release
    steps:
      - name: 設定相關環境變數
        run: | 
          $target = "aarch64-pc-windows-msvc"
          $isa = "arm64"
          echo "TARGET=$target" | Add-Content -Path $env:GITHUB_ENV
          echo "FILENAME=FFmpegGUI_windows-$isa.exe" | Add-Content -Path $env:GITHUB_ENV
          echo "FILEPATH=src-tauri/target/$target/release/tauri_ffmpeg_gui.exe" | Add-Content -Path $env:GITHUB_ENV
          echo "UPLOAD_URL='${{ needs.create-release.outputs.upload_url }}'" | Add-Content -Path $env:GITHUB_ENV

      - name: 取得原始碼
        uses: actions/checkout@v4

      - name: 設定 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 安裝 Rust 工具鏈
        uses: dtolnay/rust-toolchain@stable

      - name: 安裝 Rust 編譯架構
        run: rustup target add ${{ env.TARGET }}

      - name: 快取 Rust 相依套件
        uses: Swatinem/rust-cache@v2

      - name: 輸出 Node.js版本 / Rust版本
        run: |
          node --version
          rustc --version

      - name: 安裝前端相依套件 (package-lock.json)
        run: npm ci

      - name: 建置應用程式
        run: npm run tauri build -- --target ${{ env.TARGET }}
      
      - name: 列出產物目錄
        run: dir src-tauri/target/${{ env.TARGET }}/release/

      - name: 上傳產物
        id: upload_artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILENAME }}
          path: ${{ env.FILEPATH }}

      - name: 上傳執行檔到 Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ${{ env.FILEPATH }}
          asset_name: ${{ env.FILENAME }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macOS-x86_64:
    name: x86_64-apple-darwin
    runs-on: macos-latest
    needs: create-release
    steps:
      - name: 設定相關環境變數
        run: | 
          target="x86_64-apple-darwin"
          isa="x86_64"
          echo "TARGET=$target" >> $GITHUB_ENV
          echo "FILENAME=FFmpegGUI_macOS-$isa.dmg" >> $GITHUB_ENV
          echo "FILEPATH=$(ls src-tauri/target/$target/release/bundle/dmg/*.dmg)" >> $GITHUB_ENV
          echo "UPLOAD_URL=${{ needs.create-release.outputs.upload_url }}" >> $GITHUB_ENV

      - name: 取得原始碼
        uses: actions/checkout@v4

      - name: 設定 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 安裝 Rust 工具鏈
        uses: dtolnay/rust-toolchain@stable

      - name: 安裝 Rust 編譯架構
        run: rustup target add ${{ env.TARGET }}

      - name: 快取 Rust 相依套件
        uses: Swatinem/rust-cache@v2

      - name: 輸出 Node.js版本 / Rust版本
        run: |
          node --version 
          rustc --version
      
      - name: 安裝前端相依套件 (package-lock.json)
        run: npm ci

      - name: 建置應用程式 (arm64)
        run: npm run tauri build -- --target ${{ env.TARGET }}

      - name: 列出產物目錄 (macOS)
        run: ls src-tauri/target/${{ env.TARGET }}/release/bundle/dmg/

      - name: 上傳產物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILENAME }}
          path: ${{ env.FILEPATH }}

      - name: 上傳執行檔到 Release (arm64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ${{ env.FILEPATH }}
          asset_name: ${{ env.FILENAME }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macOS-arm64:
    name: aarch64-apple-darwin
    runs-on: macos-latest
    needs: create-release
    steps:
      - name: 設定相關環境變數
        run: | 
          target="aarch64-apple-darwin"
          isa="arm64"
          echo "TARGET=$target" >> $GITHUB_ENV
          echo "FILENAME=FFmpegGUI_macOS-$isa.dmg" >> $GITHUB_ENV
          echo "FILEPATH=$(ls src-tauri/target/$target/release/bundle/dmg/*.dmg)" >> $GITHUB_ENV
          echo "UPLOAD_URL=${{ needs.create-release.outputs.upload_url }}" >> $GITHUB_ENV

      - name: 取得原始碼
        uses: actions/checkout@v4

      - name: 設定 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 安裝 Rust 工具鏈
        uses: dtolnay/rust-toolchain@stable

      - name: 安裝 Rust 編譯架構
        run: rustup target add ${{ env.TARGET }}

      - name: 快取 Rust 相依套件
        uses: Swatinem/rust-cache@v2

      - name: 輸出 Node.js版本 / Rust版本
        run: |
          node --version 
          rustc --version
      
      - name: 安裝前端相依套件 (package-lock.json)
        run: npm ci

      - name: 建置應用程式 (arm64)
        run: npm run tauri build -- --target ${{ env.TARGET }}

      - name: 列出產物目錄 (macOS)
        run: ls src-tauri/target/${{ env.TARGET }}/release/bundle/dmg/

      - name: 上傳產物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILENAME }}
          path: ${{ env.FILEPATH }}

      - name: 上傳執行檔到 Release (arm64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ${{ env.FILEPATH }}
          asset_name: ${{ env.FILENAME }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
