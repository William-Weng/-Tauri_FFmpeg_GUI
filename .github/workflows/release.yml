name: 建立版本

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  create-release:
    name: 建立 GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: 建立 Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "${{ github.ref_name }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows-amd64:
    name: Windows amd64
    runs-on: windows-latest
    needs: create-release
    steps:
      - name: 檢查 Windows 版本
        run: |
          echo "$env:PROCESSOR_ARCHITECTURE"
          systeminfo | findstr /B /C:"OS Name" /C:"OS Version"

      - name: 設定相關環境變數
        run: | 
          $target = "x86_64-pc-windows-msvc"
          $isa = "amd64"
          echo "TARGET=$target" | Add-Content -Path $env:GITHUB_ENV
          echo "FILENAME=FFmpegGUI_windows-$isa.exe" | Add-Content -Path $env:GITHUB_ENV
          echo "FILEPATH=src-tauri/target/$target/release/tauri_ffmpeg_gui.exe" | Add-Content -Path $env:GITHUB_ENV

      - name: 取得原始碼
        uses: actions/checkout@v4

      - name: 設定 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 安裝 Rust 工具鏈
        uses: dtolnay/rust-toolchain@stable

      - name: 安裝 Rust 編譯架構
        run: rustup target add ${{ env.TARGET }}

      - name: 快取 Rust 相依套件
        uses: Swatinem/rust-cache@v2

      - name: 輸出 Node.js版本 / Rust版本
        run: |
          node --version
          rustc --version

      - name: 安裝前端相依套件 (package-lock.json)
        run: npm ci

      - name: 建置應用程式
        run: npm run tauri build -- --target ${{ env.TARGET }}
      
      - name: 列出產物目錄
        run: dir src-tauri/target/${{ env.TARGET }}/release/

      - name: 上傳檔案
        id: upload_artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILENAME }}
          path: ${{ env.FILEPATH }}

      - name: 上傳執行檔到 Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.FILEPATH }}
          asset_name: ${{ env.FILENAME }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows-aarch64:
    name: Windows aarch64
    runs-on: windows-latest
    needs: create-release
    steps:
      - name: 檢查 Windows 版本
        run: |
          echo "$env:PROCESSOR_ARCHITECTURE"
          systeminfo | findstr /B /C:"OS Name" /C:"OS Version"

      - name: 設定相關環境變數
        run: | 
          $target = "aarch64-pc-windows-msvc"
          $isa = "aarch64"
          echo "TARGET=$target" | Add-Content -Path $env:GITHUB_ENV
          echo "FILENAME=FFmpegGUI_windows-$isa.exe" | Add-Content -Path $env:GITHUB_ENV
          echo "FILEPATH=src-tauri/target/$target/release/tauri_ffmpeg_gui.exe" | Add-Content -Path $env:GITHUB_ENV

      - name: 取得原始碼
        uses: actions/checkout@v4

      - name: 設定 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 安裝 Rust 工具鏈
        uses: dtolnay/rust-toolchain@stable

      - name: 安裝 Rust 編譯架構
        run: rustup target add ${{ env.TARGET }}

      - name: 快取 Rust 相依套件
        uses: Swatinem/rust-cache@v2

      - name: 輸出 Node.js版本 / Rust版本
        run: |
          node --version
          rustc --version

      - name: 安裝前端相依套件 (package-lock.json)
        run: npm ci

      - name: 建置應用程式
        run: npm run tauri build -- --target ${{ env.TARGET }}
      
      - name: 列出產物目錄
        run: dir src-tauri/target/${{ env.TARGET }}/release/

      - name: 上傳檔案
        id: upload_artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILENAME }}
          path: ${{ env.FILEPATH }}

      - name: 上傳執行檔到 Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.FILEPATH }}
          asset_name: ${{ env.FILENAME }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macOS-amd64:
    name: macOS amd64
    runs-on: macos-latest
    needs: create-release
    steps:
      - name: 檢查 macOS 版本
        run: |
          uname -m
          sw_vers

      - name: 設定相關環境變數
        run: | 
          target="x86_64-apple-darwin"
          isa="amd64"
          echo "TARGET=$target" >> $GITHUB_ENV
          echo "FILENAME=FFmpegGUI_macOS-$isa.dmg" >> $GITHUB_ENV

      - name: 取得原始碼
        uses: actions/checkout@v4

      - name: 設定 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 安裝 Rust 工具鏈
        uses: dtolnay/rust-toolchain@stable

      - name: 安裝 Rust 編譯架構
        run: rustup target add ${{ env.TARGET }}

      - name: 快取 Rust 相依套件
        uses: Swatinem/rust-cache@v2

      - name: 輸出 系統架構 / Node.js版本 / Rust版本
        run: |
          uname -m
          node --version
          rustc --version
      
      - name: 安裝前端相依套件 (package-lock.json)
        run: npm ci

      - name: 建置應用程式
        run: npm run tauri build -- --target ${{ env.TARGET }}

      - name: 列出產物目錄
        run: ls src-tauri/target/${{ env.TARGET }}/release/bundle/dmg/

      - name: 設定 FILEPATH 變數
        run: echo "FILEPATH=$(ls src-tauri/target/${{ env.TARGET }}/release/bundle/dmg/*.dmg)" >> $GITHUB_ENV

      - name: 上傳檔案
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILENAME }}
          path: ${{ env.FILEPATH }}

      - name: 上傳執行檔到 Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.FILEPATH }}
          asset_name: ${{ env.FILENAME }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macOS-aarch64:
    name: macOS aarch64
    runs-on: macos-latest
    needs: create-release
    steps:
      - name: 檢查 macOS 版本
        run: |
          uname -m
          sw_vers

      - name: 設定相關環境變數
        run: | 
          target="aarch64-apple-darwin"
          isa="aarch64"
          echo "TARGET=$target" >> $GITHUB_ENV
          echo "FILENAME=FFmpegGUI_macOS-$isa.dmg" >> $GITHUB_ENV

      - name: 取得原始碼
        uses: actions/checkout@v4

      - name: 設定 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 安裝 Rust 工具鏈
        uses: dtolnay/rust-toolchain@stable

      - name: 安裝 Rust 編譯架構
        run: rustup target add ${{ env.TARGET }}

      - name: 快取 Rust 相依套件
        uses: Swatinem/rust-cache@v2

      - name: 輸出 Node.js版本 / Rust版本
        run: |
          node --version
          rustc --version
      
      - name: 安裝前端相依套件 (package-lock.json)
        run: npm ci

      - name: 選擇 Xcode 版本
        run: sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

      - name: 建置應用程式
        run: npm run tauri build -- --target ${{ env.TARGET }}

      - name: 列出產物目錄
        run: ls src-tauri/target/${{ env.TARGET }}/release/bundle/dmg/
      
      - name: 設定 FILEPATH 變數
        run: echo "FILEPATH=$(ls src-tauri/target/${{ env.TARGET }}/release/bundle/dmg/*.dmg)" >> $GITHUB_ENV

      - name: 上傳檔案
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILENAME }}
          path: ${{ env.FILEPATH }}

      - name: 上傳執行檔到 Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.FILEPATH }}
          asset_name: ${{ env.FILENAME }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-ubuntu-amd64:
    name: Ubuntu amd64
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: 檢查 Ubuntu 版本
        run: |
          uname -m
          cat /etc/os-release

      - name: 設定相關環境變數
        run: | 
          target="x86_64-unknown-linux-gnu"
          isa="amd64"
          echo "TARGET=$target" >> $GITHUB_ENV
          echo "FILENAME_RPM=FFmpegGUI_ubuntu-$isa.rpm" >> $GITHUB_ENV
          echo "FILENAME_DEB=FFmpegGUI_ubuntu-$isa.deb" >> $GITHUB_ENV

      - name: 取得原始碼
        uses: actions/checkout@v4

      - name: 安裝 Linux 相依套件
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf xdg-utils

      - name: 設定 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 安裝 Rust 工具鏈
        uses: dtolnay/rust-toolchain@stable

      - name: 安裝 Rust 編譯架構
        run: rustup target add ${{ env.TARGET }}

      - name: 快取 Rust 相依套件
        uses: Swatinem/rust-cache@v2

      - name: 輸出 Node.js版本 / Rust版本
        run: |
          node --version
          rustc --version

      - name: 安裝前端相依套件 (package-lock.json)
        run: npm ci

      - name: 建置應用程式
        run: npm run tauri build -- --target ${{ env.TARGET }}
      
      - name: 列出產物目錄
        run: |
          ls src-tauri/target/${{ env.TARGET }}/release/bundle/rpm/
          ls src-tauri/target/${{ env.TARGET }}/release/bundle/deb/

      - name: 設定 FILEPATH 變數
        run: |
          echo "FILEPATH_RPM=$(ls src-tauri/target/${{ env.TARGET }}/release/bundle/rpm/*.rpm)" >> $GITHUB_ENV
          echo "FILEPATH_DEB=$(ls src-tauri/target/${{ env.TARGET }}/release/bundle/deb/*.deb)" >> $GITHUB_ENV

      - name: 上傳 RPM 產物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILENAME_RPM }}
          path: ${{ env.FILEPATH_RPM }}

      - name: 上傳 DEB 產物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILENAME_DEB }}
          path: ${{ env.FILEPATH_DEB }}

      - name: 上傳 RPM 到 Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.FILEPATH_RPM }}
          asset_name: ${{ env.FILENAME_RPM }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 上傳 DEB 到 Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.FILEPATH_DEB }}
          asset_name: ${{ env.FILENAME_DEB }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}