name: 建立 Linux AMD64 版本

on:
  push:
    tags:
      - 'x*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  create-release:
    name: 建立 GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: 建立 Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "${{ github.ref_name }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-ubuntu-x86_64:
    name: Ubuntu x86_64
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: 檢查 Ubuntu 版本
        run: |
          uname -m
          cat /etc/os-release

      - name: 設定相關環境變數
        run: | 
          target="x86_64-unknown-linux-gnu"
          isa="x86_64"
          echo "TARGET=$target" >> $GITHUB_ENV
          echo "FILENAME_DEB=FFmpegGUI_ubuntu-$isa.deb" >> $GITHUB_ENV

      - name: 取得原始碼
        uses: actions/checkout@v4

      - name: 安裝 Linux 相依套件
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf xdg-utils

      - name: 設定 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 安裝 Rust 工具鏈
        uses: dtolnay/rust-toolchain@stable

      - name: 安裝 Rust 編譯架構
        run: rustup target add ${{ env.TARGET }}

      - name: 快取 Rust 相依套件
        uses: Swatinem/rust-cache@v2

      - name: 輸出 Node.js版本 / Rust版本
        run: |
          node --version
          rustc --version

      - name: 安裝前端相依套件 (package-lock.json)
        run: npm ci

      - name: 建置應用程式
        run: npm run tauri build -- --target ${{ env.TARGET }}
      
      - name: 列出產物目錄
        run: |
          ls src-tauri/target/${{ env.TARGET }}/release/bundle/deb/

      - name: 設定 FILEPATH 變數
        run: |
          echo "FILEPATH_DEB=$(ls src-tauri/target/${{ env.TARGET }}/release/bundle/deb/*.deb)" >> $GITHUB_ENV

      - name: 上傳 DEB 產物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILENAME_DEB }}
          path: ${{ env.FILEPATH_DEB }}
          
      - name: 上傳 DEB 到 Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.FILEPATH_DEB }}
          asset_name: ${{ env.FILENAME_DEB }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-rocky-linux-amd64:
    name: Rocky Linux AMD64 (RPM)
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: 取得原始碼
        uses: actions/checkout@v4

      - name: 設定 QEMU
        uses: docker/setup-qemu-action@v3

      - name: 設定 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 建置 Rocky Linux 建置環境映像檔
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.rocky.x64
          platforms: linux/amd64
          tags: tauri-builder:rocky-x64
          load: true

      - name: 在容器中編譯應用程式
        run: |
          docker run --rm \
            -v "$(pwd):/app" \
            -v "/app/node_modules" \
            tauri-builder:rocky-x64 \
            bash -c "npm install && npm run tauri build -- --target x86_64-unknown-linux-gnu"

      - name: 修正建置產物權限 (EACCES)
        run: sudo chown -R $(id -u):$(id -g) src-tauri/target

      - name: 設定 RPM 產物路徑
        id: set_paths
        run: |
          isa="amd64"
          rpm_path=$(ls src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/rpm/*.rpm)
          rpm_filename="FFmpegGUI_linux-${isa}.rpm"
          echo "RPM_PATH=$rpm_path" >> $GITHUB_ENV
          echo "RPM_FILENAME=$rpm_filename" >> $GITHUB_ENV
          echo "Found RPM: $rpm_filename"

      - name: 上傳 RPM 到 Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.RPM_PATH }}
          asset_name: ${{ env.RPM_FILENAME }}
          asset_content_type: application/x-rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
