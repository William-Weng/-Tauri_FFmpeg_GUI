name: 建立 Linux ARM64 版本

on:
  push:
    tags:
      - 'a*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  create-release:
    name: 建立 GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: 建立 Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "${{ github.ref_name }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux-arm64:
    name: Linux ARM64 建置 (使用 Docker)
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: 取得原始碼
        uses: actions/checkout@v4

      - name: 設定 QEMU
        uses: docker/setup-qemu-action@v3

      - name: 設定 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 建置 ARM64 建置環境映像檔
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.arm64
          platforms: linux/arm64
          tags: tauri-builder:arm64
          # 只建置映像檔到本地，不推送到倉庫
          load: true 

      - name: 在容器中編譯應用程式
        run: |
          docker run --rm \
            -v "$(pwd):/app" \
            -v "/app/node_modules" \
            tauri-builder:arm64 \
            bash -c "npm install && npm run tauri build -- --target aarch64-unknown-linux-gnu"

      - name: 修正建置產物權限 (EACCES)
        run: sudo chown -R $(id -u):$(id -g) src-tauri/target

      - name: 列出產物並設定路徑
        id: set_paths
        run: |
          isa="arm64"
          # RPM
          rpm_path=$(ls src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/rpm/*.rpm)
          rpm_filename="FFmpegGUI_linux-${isa}.rpm"
          echo "RPM_PATH=$rpm_path" >> $GITHUB_ENV
          echo "RPM_FILENAME=$rpm_filename" >> $GITHUB_ENV
          echo "Found RPM: $rpm_filename"
          # DEB
          deb_path=$(ls src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/deb/*.deb)
          deb_filename="FFmpegGUI_linux-${isa}.deb"
          echo "DEB_PATH=$deb_path" >> $GITHUB_ENV
          echo "DEB_FILENAME=$deb_filename" >> $GITHUB_ENV
          echo "Found DEB: $deb_filename"

      - name: 上傳 RPM 到 Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.RPM_PATH }}
          asset_name: ${{ env.RPM_FILENAME }}
          asset_content_type: application/x-rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 上傳 DEB 到 Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.DEB_PATH }}
          asset_name: ${{ env.DEB_FILENAME }}
          asset_content_type: application/vnd.debian.binary-package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}